1880. Check if Word Equals Summation of Two Words
User Accepted:5850
User Tried:6095
Total Accepted:5964
Total Submissions:7890
Difficulty:Easy
The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).

The numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.

For example, if s = "acb", we concatenate each letter's letter value, resulting in "021". After converting it, we get 21.
You are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive.

Return true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.

 

Example 1:

Input: firstWord = "acb", secondWord = "cba", targetWord = "cdb"
Output: true
Explanation:
The numerical value of firstWord is "acb" -> "021" -> 21.
The numerical value of secondWord is "cba" -> "210" -> 210.
The numerical value of targetWord is "cdb" -> "231" -> 231.
We return true because 21 + 210 == 231.
Example 2:

Input: firstWord = "aaa", secondWord = "a", targetWord = "aab"
Output: false
Explanation: 
The numerical value of firstWord is "aaa" -> "000" -> 0.
The numerical value of secondWord is "a" -> "0" -> 0.
The numerical value of targetWord is "aab" -> "001" -> 1.
We return false because 0 + 0 != 1.
Example 3:

Input: firstWord = "aaa", secondWord = "a", targetWord = "aaaa"
Output: true
Explanation: 
The numerical value of firstWord is "aaa" -> "000" -> 0.
The numerical value of secondWord is "a" -> "0" -> 0.
The numerical value of targetWord is "aaaa" -> "0000" -> 0.
We return true because 0 + 0 == 0.
 

Constraints:

1 <= firstWord.length, secondWord.length, targetWord.length <= 8
firstWord, secondWord, and targetWord consist of lowercase English letters from 'a' to 'j' inclusive.




class Solution {
    public boolean isSumEqual(String firstWord, String secondWord, String targetWord) {
        
        StringBuilder str = new StringBuilder();
        for (int i=0;i<firstWord.length();i++) {
            int ch1 = firstWord.charAt(i)-97;
            char c1=(char)(ch1+'0');    
            str.append((char)c1);
        }
        int first = Integer.valueOf(str.toString());
    
        
        StringBuilder str1 = new StringBuilder();
        for (int i=0;i<secondWord.length();i++) {
            int ch2 = secondWord.charAt(i)-97;
            char c2=(char)(ch2+'0');    
            str1.append((char)c2);
        }
        
        int second = Integer.valueOf(str1.toString());

        
        
        StringBuilder str2 = new StringBuilder();
        for (int i=0;i<targetWord.length();i++) {
            int ch3 = targetWord.charAt(i)-97;
            char c3=(char)(ch3+'0');    
            str2.append((char)c3);
        }
        
        int third = Integer.valueOf(str2.toString());
        
        if (first+second==third) {
            return true;
        } else {
            return false;
        }
        
    }
}








